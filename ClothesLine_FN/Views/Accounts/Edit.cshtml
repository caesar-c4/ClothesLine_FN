@model ClothesLine_FN.Models.Account

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Edit", "Accounts", FormMethod.Post, new { enctype = "multipart/form-data", id = "form" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-offset-2">
            <div class="col-md-10">
                <div class="form-horizontal">
                    <h4>Update Admin</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.AccountId)
                    @Html.HiddenFor(model => model.Image)

                    <div class="form-group">
                        @Html.LabelFor(model => model.EmailOrPhone, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.EmailOrPhone, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EmailOrPhone, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gander, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @{
                                List<SelectListItem> items = new List<SelectListItem>()
                                {
                                        new SelectListItem() {Text = "Male"},
                                       new SelectListItem() {Text = "Femail"},
                                };
                            }
                            @Html.DropDownListFor(model => model.Gander, items, "Select Gender", htmlAttributes: new { id = "Gender", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Gander, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Profession, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @{
                                List<SelectListItem> items2 = new List<SelectListItem>()
                                {
                                     new SelectListItem() {Text = "Admin"},
                                };
                            }
                            @Html.DropDownListFor(model => model.Profession, items2, "Select ", htmlAttributes: new { id = "Gender", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Profession, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <input type="file" name="ImageFile" id="Image" />
                            @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                            <br />
                            @if (Model.Image != null)
                            {
                                string base64Image = Convert.ToBase64String(Model.Image);
                                string Image = string.Format("data:image/gif;base64,{0}", base64Image);
                                <img src="@Image" class="img-responsive" id="TargetImage" height="100" width="100" />
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-8">
                            <input type="submit" value="Update" class="btn btn-success" />
                            @if (ViewBag.Message != null)
                            {
                                <div class="col-md-6">
                                    <p class="text-danger"> @ViewBag.Message</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to list", "List")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        //this is for showing image immediately:
        $("#Image").change(function () {
            var file = this.files;
            if (file && file[0]) {
                ReadImage(file[0]);
            }
        });
        var ReadImage = function (file) {
            var reader = new FileReader;
            var image = new Image;
            reader.readAsDataURL(file);
            reader.onload = function (_file) {
                image.src = _file.target.result;
                $("#TargetImage").attr("src", _file.target.result);
                image.onload = function () {
                    var height = this.height;
                    var width = this.width;
                    var type = file.type;

                    var value = (file.size / 1024)
                    var size = Math.round(value * 100) / 100 + " KB";

                    $("#TargetImage").attr("src", _file.target.result);
                    $("#Imagedescription").html("Size: " + size + '</br>' + "Dimension: " + height + " × " + width);
                    $("#imagePreview").show();
                }
            }
        }
    </script>
}
